#!/bin/zsh

# Usage: report.sh COMMAND
#
# This script will run the given command and check the error code it returns.
# A success message will be displayed if no errors code, otherwise a brief
# failure message will be displayed.
#
# The messages generated by this script all begin with a brief description of
# the command being run.  This description is taken from stdout of said
# command.  Likewise, error messages are taken from stderr if the command
# fails for any reason.

COMMAND=$1

OUT_FILE="stdout.tmp"
ERR_FILE="stderr.tmp"

NORMAL=$'\e[0m'
FAILURE=$'\e[1;31m'     # Bold red.
SUCCESS=$'\e[1;32m'     # Bold green.

LENGTH=62

# Print a message and immediately abort if the wrong arguments are given.
if [ $# -ne 1 ]; then
    echo "Usage: ./report.sh COMMAND"
    exit 10
fi

# Run the given command and redirect stdout and stderr to different files.  If
# necessary, the content of these files will be formatted and displayed.
$COMMAND 1> $OUT_FILE 2> $ERR_FILE

# Determine whether or not the command succeeded.
ERROR_CODE=$?

# Decide whether to report success or failure based on the return code of the
# given command.
case $ERROR_CODE in
    0) STATUS="${SUCCESS}  OK  ${NORMAL}" ;;
    *) STATUS="${FAILURE}FAILED${NORMAL}" ;;
esac

# Load any output generated by the command into a pair of variables.  Stdout
# out is taken to be a description of the command being run, while stderr is
# taken to be a debugging message.
DESCRIPTION=`cat $OUT_FILE`
ERROR_MESSAGE=`cat $ERR_FILE`

# Truncate the description if necessary.
if [ ${#DESCRIPTION} -gt $((LENGTH - 1)) ]; then
    DESCRIPTION=$(echo $DESCRIPTION | cut -c1-$((LENGTH-4)))
    DESCRIPTION=${DESCRIPTION}...
fi

# Produce a colored status message.
printf "%-${LENGTH}s[ %s ]\n" $DESCRIPTION $STATUS

# If the command failed, also display an error message.  The error message is
# indented by two spaces for readability.
if [ $ERROR_CODE -ne 0 ]; then
    echo $ERROR_MESSAGE | sed "s/^/  /"
    echo
fi

# Clean up any temporary files that were generated.
rm $OUT_FILE $ERR_FILE
